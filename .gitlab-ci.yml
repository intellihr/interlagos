image: docker:stable

services:
  - docker:dind

stages:
  - build
  - test
  - release
  - publish

variables:
  DOCKER_DRIVER: overlay2
  CONTAINER_BUILD_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH:$CI_BUILD_REF
  CONTAINER_MASTER_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH:master

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com

build:
  stage: build
  script:
    - docker pull $CONTAINER_MASTER_IMAGE || true
    - docker build
      --cache-from $CONTAINER_MASTER_IMAGE
      --tag $CONTAINER_BUILD_IMAGE .
    - docker push $CONTAINER_BUILD_IMAGE

test:
  stage: test
  script:
    - docker pull $CONTAINER_BUILD_IMAGE
    - docker run $CONTAINER_BUILD_IMAGE test

dependency_scanning:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

sast:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD/interlagos:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
    - mv interlagos/gl-sast-report.json gl-sast-report.json
  artifacts:
    paths: [gl-sast-report.json]

container_scanning:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${CONTAINER_BUILD_IMAGE}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CONTAINER_BUILD_IMAGE} || true
  artifacts:
    paths: [gl-container-scanning-report.json]

code_quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

release-image:
  stage: release
  script:
    - docker pull $CONTAINER_MASTER_IMAGE || true
    - docker build
        --cache-from $CONTAINER_MASTER_IMAGE
        --tag $CONTAINER_MASTER_IMAGE .
    - docker push $CONTAINER_MASTER_IMAGE
  only:
    - master
    - tags

release-artifact:
  stage: publish
  script:
    - docker pull $CONTAINER_MASTER_IMAGE || true
  artifacts:
    name: "$CI_COMMIT_TAG"
    paths:
      - interlagos
  dependencies:
    - release-image
  only:
    - tags
